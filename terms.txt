A Web service is a software application that conforms to the Web Service Interoperability Organization's Basic Profile 1.0.
Main purpose of Web service technologies is to allow applications on different platforms to exchange business data. 
Web service technologies are used for Application-to-Application (A2A) integration or Business-to-Business (B2B) communication.

XML (eXtensible Markup Language), SOAP (Simple Object Access Protocol), WSDL (Web Services Description Language), and
UDDI(Universal Description, Discovery, and Integration) are used in concert to provide Web service applications with a type
system (XML), a messaging protocol (SOAP), an interface definition language (WSDL), and a registry for publishing Web services
(UDDI).

XML documents contain the information being exchanged between two parties, while SOAP provides a packaging and routing standard for exchanging XML documents over a network. WSDL allows anorganization to describe the types of XML documents and SOAP
messages that must be used to interact with their Web services. Finally, UDDI allows organizations to register their Web
services in a uniform manner within a common directory, so clients can locate their Web services and learn how to access them.

An XML document may be well formed, but invalid because it is not organized according to its schema.
A schema is used to define elements and attributes in a markup language and verify the correctness of an XML instance;
it's not a computer program.

The names of XML schema types are case-sensitive. When an element declares that it is of a particular type, it must specify
both the namespace and the name of that type exactly as the type declares them.

According to the WS-I Basic Profile 1.0, Web services must support all of the XML schema features.

JAX-RPC maps some of the XML schema built-in types to Java primitives, and basic complex types to Java beans. JAX-RPC can map
most derived complex types to Java beans, but not all. Similar limitations are found in other platforms like .NET and 
SOAP::Lite for Perl.

You cannot omit an element from a restriction unless the parent type declared it to be optional(minOccurs="0"). In addition,
the derived type's occurrence constraints cannot be less strict than those of its base type.

Web services can use One-Way messaging or Request/Response messaging. In the former, SOAP messages travel in only one
direction, from a sender to a receiver. In the latter, a SOAP message travels from the sender to the receiver, which is
expected to send a reply back to the sender.

In many cases you will not deal directly with WSDL documents, because code generators such as JAX-RPC providers will create
convenient language-specific call interfaces for invoking Web services. In addition, existing interfaces can be used with
tools to generate WSDL documents, so in many cases you may not be exposed to the contents of WSDL documents at all. While a
detailed knowledge of WSDL document structure isn't necessary when using code generators, it is important for you to 
understand the organization and purpose of WSDL documents if you wish to truly master Web services. You have to understand
WSDL to construct and exchange SOAP messages properly when using SOAP APIs, and these tools are often important when code
generators are not available or are not robust enough to support your messaging requirements.

One of the things that makes UDDI interesting is that it requires support for SOAP 1.1 over HTTP. In fact, the UDDI
specification requires that UDDI registries support a specific set of SOAP-based Web service operations called the UDDI
Programming API.

One solution to this problem would be for Web service standards organizations to define strict requirements on how
organizations list and categorize their business Entitys, bindingTemplates, and tModels. More predictability would reduce
the difficulty of searching a UDDI directory. The WS-I organization defines such requirements in its WS-I Basic Profile 1.0
we can hope other standards organizations follow suit.

Like the Inquiry API, the Publishing API is a full-fledged Web service based on SOAP's Document/Literal mode of messaging,
and is described by a WSDL document. Unlike the Inquiry API, the Publishing API requires that UDDI operators use HTTPS (HTTP
with SSL 3.0) for confidentiality and some form of authentication. In addition, every message except for the login must 
include an authorization token that is automatically issued by the UDDI registry at the start of a session. Each session will
have a unique authentication token, which is good only for the life of the session.

The SOAP messages used in the Publishing API are not complicated and are defined in detail in the following sections. The API
supports four kinds of operations: authorization operations, save operations, delete operations, and get operations. The
authorization operations allow you to authenticate yourself, obtain an authorization token, and terminate a session and its
authentication token. The save operations let you add or update the primary data structures. The delete operations let you
remove primary data structures. The get operations let you view publisherAssertions and a summary of registered information.

JAX-RPC is the very soul of J2EE Web Services. It defines the standard programming model for both Web service clients and
endpoints in J2EE. There are essentially two sides to the JAX-RPC model: client-side and server-side. The client-side
programming model allows you to access a remote Web service as if it were a local object, using methods that represent SOAP 
operations. The server-side programming model allows you to develop Web service endpoints as Java objects or Enterprise
JavaBeans, which run on the J2EE platform.
